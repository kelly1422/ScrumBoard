[{"/root/molcam3/noMajor/test/src/index.js":"1","/root/molcam3/noMajor/test/src/Header.js":"2","/root/molcam3/noMajor/test/src/Footer.js":"3","/root/molcam3/noMajor/test/src/Body.js":"4","/root/molcam3/noMajor/test/src/BoardForm.js":"5","/root/molcam3/noMajor/test/src/LoginForm.js":"6","/root/molcam3/noMajor/test/src/BoardDetail.js":"7","/root/molcam3/noMajor/test/src/UserDetail.js":"8","/root/molcam3/noMajor/test/src/BoardWriteForm.js":"9","/root/molcam3/noMajor/test/src/MypageForm.js":"10","/root/molcam3/noMajor/test/src/CalendarApp.js":"11","/root/molcam3/noMajor/test/src/NewSchedule.js":"12","/root/molcam3/noMajor/test/src/ImageUpload.js":"13","/root/molcam3/noMajor/test/src/Comment.js":"14"},{"size":374,"mtime":1626781512302,"results":"15","hashOfConfig":"16"},{"size":2655,"mtime":1626800542233,"results":"17","hashOfConfig":"16"},{"size":146,"mtime":1626781512298,"results":"18","hashOfConfig":"16"},{"size":2318,"mtime":1626804562071,"results":"19","hashOfConfig":"16"},{"size":2831,"mtime":1626800542233,"results":"20","hashOfConfig":"16"},{"size":7419,"mtime":1626781899100,"results":"21","hashOfConfig":"16"},{"size":4759,"mtime":1626800542233,"results":"22","hashOfConfig":"16"},{"size":3146,"mtime":1626781512298,"results":"23","hashOfConfig":"16"},{"size":3154,"mtime":1626781512298,"results":"24","hashOfConfig":"16"},{"size":3499,"mtime":1626800542233,"results":"25","hashOfConfig":"16"},{"size":3439,"mtime":1626800542233,"results":"26","hashOfConfig":"16"},{"size":3016,"mtime":1626800542233,"results":"27","hashOfConfig":"16"},{"size":3263,"mtime":1626837495114,"results":"28","hashOfConfig":"16"},{"size":1974,"mtime":1626800542233,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1hihb3l",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"/root/molcam3/noMajor/test/src/index.js",[],["64","65"],"/root/molcam3/noMajor/test/src/Header.js",[],"/root/molcam3/noMajor/test/src/Footer.js",[],"/root/molcam3/noMajor/test/src/Body.js",[],"/root/molcam3/noMajor/test/src/BoardForm.js",[],"/root/molcam3/noMajor/test/src/LoginForm.js",[],"/root/molcam3/noMajor/test/src/BoardDetail.js",["66"],"import React, { Component } from \"react\";\nimport { Table, Button } from \"react-bootstrap\";\nimport { NavLink } from \"react-router-dom\";\nimport axios from \"axios\";\nimport Comment from \"./Comment\";\naxios.defaults.withCredentials = true;\nconst headers = { withCredentials: true };\n\nclass BoardDetail extends Component {\n  state = {\n    subject:\"\",\n    board: []\n  };\n\n  componentDidMount() { //생성자 같은 함수, 이 페이지에 (/board/detail) 에 들어오면 바로 실행되는 느낌\n    if (this.props.location.query !== undefined) { //쿼리로 보낸게 없으면 (NavLink 로 이 페이지 주소로 연결할때 주는)\n      this.getDetail();\n    } else {\n      window.location.href = \"/\";\n    }\n  }\n\n  deleteBoard = _id => {\n    const send_param = {\n      headers,\n      _id\n    };\n    if (window.confirm(\"정말 삭제하시겠습니까?\")) {\n      axios\n        .post(\"http://192.249.18.151:80/board/delete\", send_param) //보드라우터 가서 딜리트 실행\n        //정상 수행\n        .then(returnData => {\n          alert(\"게시글이 삭제 되었습니다.\");\n          window.location.href = \"/\";\n        })\n        //에러\n        .catch(err => {\n          console.log(err);\n          alert(\"글 삭제 실패\");\n        });\n    }\n  };\n\n  getComment =() =>{\n\n    const tableId = this.props.tableId;\n    const send_param ={\n    headers,\n    _id: this.props.location.query._id,\n    tableId: tableId\n    }\n    axios.post(\"http://172.10.18.147:80/comment/getCommentList\", send_param)\n    .then(returnData=>{\n    if(returnData.data.success){\n    const comment=(\n    <div>\n    <Table striped bordered hover>\n    <thead>\n    <tr>\n    <th>{returnData.data.comment[0].title}</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n    <td\n    dangerouslySetInnerHTML={{\n    __html: returnData.data.comment[0].content\n    }}\n    ></td>\n    </tr>\n    </tbody>\n    </Table>\n    </div>\n    )\n    }else{\n    alert('코멘트 정보를 가져오는 것을 실패하였습니다.')\n    }\n    })\n    }\n\n  getDetail = () => {\n    const send_param = {\n      headers,\n      _id: this.props.location.query._id\n    };\n    axios\n      .post(\"http://192.249.18.151:80/board/detail\", send_param) //보드 라우터의 디테일 실행 (파람을 보내기)\n      //정상 수행\n      .then(returnData => { //받아온 보드 데이터들 \n        if (returnData.data.board[0]) { //받아온 보드 데이터는 한개이므로 걍 0번째 인덱스로 하면됨\n          const board = ( //받아온 보드 데이터를 아래 형식으로 표현\n            <div>\n              <Table striped bordered hover>\n                <thead>\n                  <tr>\n                    <th>{returnData.data.board[0].title}</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr>\n                    <td\n                      dangerouslySetInnerHTML={{ //\n                        __html: returnData.data.board[0].content\n                      }}\n                    ></td>\n                  </tr>\n                </tbody>\n              </Table>\n\n              <Comment/>\n\n              <div>\n                <NavLink\n                  to={{\n                    pathname: \"/boardWrite\",\n                    query: {\n                      title: returnData.data.board[0].title,\n                      content: returnData.data.board[0].content,\n                      _id: this.props.location.query._id\n                    }\n                  }}\n                >\n                  <Button block className=\"my-3\">\n                    글 수정\n                  </Button>\n                </NavLink>\n                <Button\n                  block\n                  className=\"my-3\"\n                  onClick={this.deleteBoard.bind(\n                    null,\n                    this.props.location.query._id\n                  )}\n                >\n                  글 삭제\n                </Button>\n              </div>\n            </div>\n          );\n          this.setState({\n            subject: returnData.data.board[0].title,\n            board: board //맨위에서 선언한 board : 방금 받아온 board 데이터\n          });\n        } else {\n          alert(\"글 상세 조회 실패\");\n        }\n      })\n      //에러\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  //onClick={this.getBoard.bind(null,this.props._id)}\n  render() {\n    const divStyle = {\n      marginTop: 30,\n      marginLeft:200,\n      marginRight:200,\n      marginBottom:50\n    };\n    return (\n      <div>\n      <h2><strong>Subject : {this.state.subject}</strong></h2>\n      <div style={divStyle}>{this.state.board}</div>\n      </div>\n    ); //this.state.board 에 테이블이 들어감\n  }\n}\n\nexport default BoardDetail;","/root/molcam3/noMajor/test/src/UserDetail.js",["67"],"import React, { Component } from \"react\";\nimport { Table } from \"react-bootstrap\";\nimport { NavLink } from \"react-router-dom\";\nimport axios from \"axios\";\nimport $ from \"jquery\";\nimport {} from \"jquery.cookie\";\naxios.defaults.withCredentials = true;\nconst headers = { withCredentials: true };\n\nclass BoardRow extends Component {\n    render() {\n        return (\n            <tr>\n            <td>\n            <NavLink\n                to={{ pathname: \"/board/detail\", query: { _id: this.props._id } }}\n            >\n                {this.props.createdAt.substring(0, 10)}\n            </NavLink>\n            </td>\n            <td>\n            <NavLink\n                to={{ pathname: \"/board/detail\", query: { _id: this.props._id } }}\n            >\n                {this.props.title}\n            </NavLink>\n            </td>\n            </tr>\n        );\n    }\n}\n\nclass UserDetail extends Component {\n  state = {\n    boardList: [],\n    \n    author: \"\"\n  };\n\n  componentDidMount() { //생성자 같은 함수, 이 페이지에 (/board/detail) 에 들어오면 바로 실행되는 느낌\n    if (this.props.location.query !== undefined) { //쿼리로 보낸게 없으면 (NavLink 로 이 페이지 주소로 연결할때 주는 쿼리)\n      this.getBoardList(this.props.location.query.author);\n    } else {\n      window.location.href = \"/\";\n    }\n  }\n\n  getBoardList = writer => {\n    //  console.log(writer);\n    const send_param = {\n      headers,\n      author: writer\n    };\n    axios\n      .post(\"http://192.249.18.151:80/board/getBoardListUser\", send_param)\n      .then(returnData => {\n        let boardList;\n        if (returnData.data.list.length > 0) {\n          console.log(returnData.data);\n          // console.log(returnData.data.list.length);\n          const boards = returnData.data.list;\n          boardList = boards.map(item => (\n            <BoardRow\n              key={Date.now() + Math.random() * 500}\n              _id={item._id}\n              createdAt={item.createdAt}\n              title={item.title}\n            ></BoardRow>\n          ));\n          // console.log(boardList);\n          this.setState({\n            boardList: boardList,\n            author:writer\n          });\n        } else {\n          boardList = (\n            <tr>\n              <td colSpan=\"2\">작성한 게시글이 존재하지 않습니다.</td>\n            </tr>\n          );\n          this.setState({\n            author:writer,\n            boardList: boardList\n          });\n          // window.location.reload();\n        }\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  render() {\n    const divStyle = {\n      marginTop: 50,\n      marginRight: 200,\n      marginLeft:200 \n    };\n    return (\n      <div>\n        <h2><strong>{this.state.author} 's Project</strong></h2>\n        <div style={divStyle}>\n          <Table striped bordered hover>\n            <thead>\n              <tr>\n                <th>날짜</th>\n                <th>글 제목</th>\n              </tr>\n            </thead>\n            <tbody>{this.state.boardList}</tbody>\n          </Table>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default UserDetail;","/root/molcam3/noMajor/test/src/BoardWriteForm.js",[],"/root/molcam3/noMajor/test/src/MypageForm.js",["68"],"import React, { Component } from \"react\";\nimport { Table } from \"react-bootstrap\";\nimport { NavLink } from \"react-router-dom\";\nimport axios from \"axios\";\nimport $ from \"jquery\";\nimport {} from \"jquery.cookie\";\naxios.defaults.withCredentials = true;\nconst headers = { withCredentials: true };\n    \n    class BoardRow extends Component {\n        render() {\n            return (\n                <tr>\n                <td>\n                <NavLink\n                    to={{ pathname: \"/board/detail\", query: { _id: this.props._id } }}\n                >\n                    {this.props.createdAt.substring(0, 10)}\n                </NavLink>\n                </td>\n                <td>\n                <NavLink\n                    to={{ pathname: \"/board/detail\", query: { _id: this.props._id } }}\n                >\n                    {this.props.title}\n                </NavLink>\n                </td>\n                </tr>\n            );\n        }\n    }\n    \n    class MypageForm extends Component {\n      state = {\n        boardList: [],\n        \n        author: \"\"\n      };\n    \n      componentDidMount() { //생성자 같은 함수, 이 페이지에 (/board/detail) 에 들어오면 바로 실행되는 느낌\n        if (this.props.location.query !== undefined) { //쿼리로 보낸게 없으면 (NavLink 로 이 페이지 주소로 연결할때 주는 쿼리)\n          this.getBoardList(this.props.location.query._id);\n        } else {\n          window.location.href = \"/\";\n        }\n      }\n    \n      getBoardList = writer => {\n        //  console.log(writer);\n        const send_param = {\n          headers,\n          author: writer\n        };\n        axios\n          .post(\"http://192.249.18.151:80/board/getBoardMyPage\", send_param)\n          .then(returnData => {\n            let boardList;\n            if (returnData.data.list.length > 0) {\n              console.log(returnData.data);\n              // console.log(returnData.data.list.length);\n              const boards = returnData.data.list;\n              boardList = boards.map(item => (\n                <BoardRow\n                  key={Date.now() + Math.random() * 500}\n                  _id={item._id}\n                  createdAt={item.createdAt}\n                  title={item.title}\n                ></BoardRow>\n              ));\n              // console.log(boardList);\n              this.setState({\n                boardList: boardList\n              });\n            } else {\n              boardList = (\n                <tr>\n                  <td colSpan=\"2\">작성한 게시글이 존재하지 않습니다.</td>\n                </tr>\n              );\n              this.setState({\n                boardList: boardList\n              });\n              // window.location.reload();\n            }\n          })\n          .catch(err => {\n            console.log(err);\n          });\n      };\n    \n      render() {\n        const divStyle = {\n          marginTop: 50,\n          marginRight: 200,\n          marginLeft:200 \n        };\n        return (\n          <div>\n            <h2><strong>My Project</strong></h2>\n            <div style={divStyle}>\n              <Table striped bordered hover>\n                <thead>\n                  <tr>\n                    <th>날짜</th>\n                    <th>글 제목</th>\n                  </tr>\n                </thead>\n                <tbody>{this.state.boardList}</tbody>\n              </Table>\n            </div>\n          </div>\n        );\n      }\n    }\n    \n    export default MypageForm;","/root/molcam3/noMajor/test/src/CalendarApp.js",["69","70"],"import React, { Component } from \"react\";\nimport { Calendar, momentLocalizer } from \"react-big-calendar\";\nimport moment from \"moment\";\nimport withDragAndDrop from \"react-big-calendar/lib/addons/dragAndDrop\";\nimport \"./App.css\";\nimport \"react-big-calendar/lib/addons/dragAndDrop/styles.css\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport axios from 'axios';\n\nconst localizer = momentLocalizer(moment);\nconst DnDCalendar = withDragAndDrop(Calendar);\n\nclass CalendarApp extends Component {\n  state = {\n    events: [\n      {\n        start: \"2021-07-03\",\n        end: \"2021-07-03\",\n        title: \"1:30pm 스타트업 강연 및 면담\",\n      },\n      {\n        start: \"2021-07-07\",\n        end: \"2021-07-07\",\n        title: \"1:00pm 1주차 프로젝트 발표\",\n      },\n      {\n        start: \"2021-07-07\",\n        end: \"2021-07-07\",\n        title: \"3:40pm 서버 기술 세미나\",\n      },\n      {\n        start: \"2021-07-07\",\n        end: \"2021-07-07\",\n        title: \"4:40pm 본엔젤스 소개\",\n      },\n      {\n        start: \"2021-07-07\",\n        end: \"2021-07-07\",\n        title: \"5:10pm 조인스타트업 소개\",\n      },\n      {\n        start: \"2021-07-12\",\n        end: \"2021-07-12\",\n        title: \"3:30pm 인공지능(딥러닝) 세미나\",\n      },\n      {\n        start: \"2021-07-14\",\n        end: \"2021-07-14\",\n        title: \"12:00pm 2주차 프로젝트 발표\",\n      },\n      {\n        start: \"2021-07-15\",\n        end: \"2021-07-15\",\n        title: \"3:30pm 창업케이스#1 - 에이팀벤처스\",\n      },\n      {\n        start: \"2021-07-21\",\n        end: \"2021-07-21\",\n        title: \"1:00pm 3주차 프로젝트 발표\",\n      },\n      {\n        start: \"2021-07-22\",\n        end: \"2021-07-22\",\n        title: \"3:40pm 창업케이스#2 - ?\",\n      },\n      {\n        start: \"2021-07-27\",\n        end: \"2021-07-27\",\n        title: \"3:00pm 창업케이스#3 - ?\",\n      },\n      {\n        start: \"2021-07-30\",\n        end: \"2021-07-30\",\n        title: \"1:00pm 4주차 프로젝트 발표\",\n      },\n      {\n        start: \"2021-07-30\",\n        end: \"2021-07-30\",\n        title: \"6:00pm 전체 회식\",\n      },\n    ],\n  };\n\n  _getEvents = async()=>{\n    const events = await this.axiosEvents();\n    this.setState({events})\n  }\n\n  _axiosEvents = ()=>{\n    return axios.post('/detail').then(res=>res.data)\n  }\n\n  onEventResize = (data) => {\n    const { start, end } = data;\n\n    this.setState((state) => {\n      state.events[0].start = start;\n      state.events[0].end = end;\n      return { events: [...state.events] };\n    });\n  };\n\n  onEventDrop = (data) => {\n    console.log(data);\n  };\n\n\n  openModal = () => {\n    this.setState({ isModalOpen: true });\n  };\n\n  closeModal = () => {\n    this.setState({ isModalOpen: false });\n  };\n\n  \n  render() {\n    const marginBottom = {\n      marginBottom: 5\n    };\n    const buttonStyle = {\n      margin: \"10px 10px 10px 10px\",\n      display: this.state.buttonDisplay\n    };\n\n\n    return (\n      <div className=\"App\">\n        \n        <DnDCalendar\n          defaultDate={moment().toDate()}\n          defaultView=\"month\"\n          events={this.state.events}\n          localizer={localizer}\n          onEventDrop={this.onEventDrop}\n          onEventResize={this.onEventResize}\n          resizable\n          style={{ height: \"100vh\", paddingTop:\"50px\" , paddingLeft:\"50px\", paddingRight:\"50px\"}}\n        />\n      </div>\n    );\n  }\n}\n\nexport default CalendarApp;","/root/molcam3/noMajor/test/src/NewSchedule.js",["71","72","73"],"import React, { Component } from \"react\";\nimport {CKEditor} from 'ckeditor4-react';\nimport { Button, Form, FormText} from \"react-bootstrap\";\nimport axios from \"axios\";\nimport $ from \"jquery\";\nimport {} from \"jquery.cookie\";\naxios.defaults.withCredentials = true;\nconst headers = { withCredentials: true };\n\nclass NewSchedule extends Component {\n\n  state = {\n    data: \"\"\n  };\n\n//   componentDidMount() {\n//     if (this.props.location.query !== undefined) {\n//       this.calendarTitle.value = this.props.location.query.title;\n//     }\n//   }\n\n//   componentWillMount(){\n//     if (this.props.location.query !== undefined) {\n//       this.setState({\n//         data: this.props.location.query.content\n//       });\n//     }\n//   }\n\n  writeCalendar = () => {\n    let url;\n    let send_param;\n\n    const calendarTitle = this.calendarTitle.value;\n    const calendarContent = this.state.data;\n\n    if (calendarTitle === undefined || calendarTitle === \"\") {\n      alert(\"글 제목을 입력 해주세요.\");\n      this.calendarTitle.focus();\n      return;\n    } else if (calendarContent === undefined || calendarContent === \"\") {\n      alert(\"글 내용을 입력 해주세요.\");\n      this.calendarContent.focus();\n    }\n    \n    if (this.props.location.query !== undefined) {\n      url = \"http://172.10.18.147:80/calendar/update\";\n      send_param = {\n        headers,\n        \"_id\" : this.props.location.query._id,\n        \"title\": calendarTitle,\n        \"content\": calendarContent\n      };\n    } else {\n      url = \"http://172.10.18.147:80/calendar/write\";\n      send_param = {\n        headers,\n        \"_id\" : $.cookie(\"login_id\"),\n        \"title\": calendarTitle,\n        \"content\": calendarContent\n      };\n\n    }\n\n    axios\n      .post(url, send_param)\n      //정상 수행\n      .then(returnData => {\n        if (returnData.data.message) {\n          alert(returnData.data.message);\n          window.location.href = \"/\";\n        } else {\n          alert(\"글쓰기 실패\");\n        }\n      })\n      //에러\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  onEditorChange = evt => {\n    this.setState({\n      data:evt.editor.getData()\n    });\n  };\n\n  render() {\n    console.log('new schedule page');\n    const divStyle = {\n      margin: 50\n    };\n    const titleStyle = {\n      marginBottom: 5\n    };\n    const buttonStyle = {\n      marginTop: 5\n    };\n\n    const{isOpen, close} = this.props;\n\n    return (\n      <>\n          {isOpen ?(\n            <div style={divStyle} className=\"App\">\n            <h2>new schedule</h2>\n            <Form.Control\n            type=\"text\"\n            style={titleStyle}\n            placeholder=\"New Schedule\"\n            ref={ref => (this.calendarTitle = ref)}\n            />\n            <Form.Control \n                type='string'\n                placeholder='Date'/>\n            <Button style={buttonStyle} onClick={this.writeCalendar} block>\n            Save\n            </Button></div>\n          ): null}\n      </>\n    );\n  }\n}\n\nexport default NewSchedule;","/root/molcam3/noMajor/test/src/ImageUpload.js",["74","75","76","77","78","79","80"],"/root/molcam3/noMajor/test/src/Comment.js",[],{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":55,"column":11,"nodeType":"87","messageId":"88","endLine":55,"endColumn":18},{"ruleId":"85","severity":1,"message":"89","line":5,"column":8,"nodeType":"87","messageId":"88","endLine":5,"endColumn":9},{"ruleId":"85","severity":1,"message":"89","line":5,"column":8,"nodeType":"87","messageId":"88","endLine":5,"endColumn":9},{"ruleId":"85","severity":1,"message":"90","line":118,"column":11,"nodeType":"87","messageId":"88","endLine":118,"endColumn":23},{"ruleId":"85","severity":1,"message":"91","line":121,"column":11,"nodeType":"87","messageId":"88","endLine":121,"endColumn":22},{"ruleId":"85","severity":1,"message":"92","line":2,"column":9,"nodeType":"87","messageId":"88","endLine":2,"endColumn":17},{"ruleId":"85","severity":1,"message":"93","line":3,"column":24,"nodeType":"87","messageId":"88","endLine":3,"endColumn":32},{"ruleId":"85","severity":1,"message":"94","line":100,"column":19,"nodeType":"87","messageId":"88","endLine":100,"endColumn":24},{"ruleId":"85","severity":1,"message":"95","line":1,"column":27,"nodeType":"87","messageId":"88","endLine":1,"endColumn":36},{"ruleId":"85","severity":1,"message":"96","line":3,"column":8,"nodeType":"87","messageId":"88","endLine":3,"endColumn":15},{"ruleId":"85","severity":1,"message":"97","line":4,"column":8,"nodeType":"87","messageId":"88","endLine":4,"endColumn":14},{"ruleId":"85","severity":1,"message":"89","line":6,"column":8,"nodeType":"87","messageId":"88","endLine":6,"endColumn":9},{"ruleId":"85","severity":1,"message":"98","line":10,"column":7,"nodeType":"87","messageId":"88","endLine":10,"endColumn":14},{"ruleId":"99","severity":1,"message":"100","line":55,"column":20,"nodeType":"101","messageId":"102","endLine":55,"endColumn":32,"fix":"103"},{"ruleId":"104","severity":1,"message":"105","line":95,"column":29,"nodeType":"106","endLine":95,"endColumn":69},"no-native-reassign",["107"],"no-negated-in-lhs",["108"],"no-unused-vars","'comment' is assigned a value but never used.","Identifier","unusedVar","'$' is defined but never used.","'marginBottom' is assigned a value but never used.","'buttonStyle' is assigned a value but never used.","'CKEditor' is defined but never used.","'FormText' is defined but never used.","'close' is assigned a value but never used.","'useEffect' is defined but never used.","'Gallery' is defined but never used.","'styles' is defined but never used.","'headers' is assigned a value but never used.","new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"109","text":"110"},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",[1637,1637],"()"]